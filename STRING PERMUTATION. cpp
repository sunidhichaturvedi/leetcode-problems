//Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

//In other words, return true if one of s1's permutations is the substring of s2.

class Solution {
public:
    bool isfreqSame(int freq1[26], int freq2[26]) {
        for (int i = 0; i < 26; i++) {
            if (freq1[i] != freq2[i]) {
                return false;
            }
        }
        return true;
    }

    bool checkInclusion(string s1, string s2) {
        int freq[26] = {0};
        int windfreq[26] = {0};

        if (s1.length() > s2.length()) return false;

        for (int i = 0; i < s1.length(); i++) {
            freq[s1[i] - 'a']++;
            windfreq[s2[i] - 'a']++;
        }

        int winsize = s1.length();
        for (int i = 0; i <= s2.length() - winsize; i++) {
            if (i != 0) {
                windfreq[s2[i - 1] - 'a']--;  // Remove left char
                windfreq[s2[i + winsize - 1] - 'a']++;  // Add new char
            }

            if (isfreqSame(freq, windfreq)) {
                return true;
            }
        }

        return false;
    }
};
 


